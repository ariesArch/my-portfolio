{
  "version": 3,
  "sources": ["../../../contentlayer.config.ts"],
  "sourcesContent": ["import GithubSlugger from \"github-slugger\"\nimport {\n  defineDocumentType,\n  makeSource,\n  ComputedFields,\n  FieldDefs,\n} from \"contentlayer/source-files\";\n\nimport rehypePrismPlus from \"rehype-prism-plus\";\nimport remarkGfm from \"remark-gfm\";\nimport rehypeSlug from \"rehype-slug\";\n\nconst computedFields: ComputedFields = {\n  id: {\n    type: \"string\",\n    resolve: (doc) => doc.id || doc._raw.flattenedPath.replace(\"blog/\", \"\"),\n  },\n  slug: {\n    type: \"string\",\n    resolve: (doc) => `${doc._raw.flattenedPath}`,\n  },\n  slugAsParams: {\n    type: \"string\",\n    resolve: (doc) => doc._raw.flattenedPath.split(\"/\").slice(1).join(\"/\"),\n  },\n  headings: {\n  type: \"json\",\n  resolve: async (doc) => {\n    const regXHeader = /\\n(?<flag>#{1,6})\\s+(?<content>.+)/g;\n    const slugger = new GithubSlugger()\n    const headings = Array.from(doc.body.raw.matchAll(regXHeader)).map(\n        ({ groups }:any) => {\n          const flag = groups?.flag;\n          const content = groups?.content;\n          return {\n            level: flag.length,\n            text: content,\n            slug: content ? slugger.slug(content) : undefined\n          };\n        }\n      );\n      return headings;\n  },\n}\n};\n\nconst blogFields: FieldDefs = {\n  id: {\n      type: \"string\",\n    },\n  title: { type: \"string\", required: true },\n  description: { type: \"string\" },\n  date: { type: \"date\", required: true },\n  published: { type: \"boolean\", default: true },\n  category: {type: \"string\", default: \"laravel\"}\n};\n\nexport const Blog = defineDocumentType(() => ({\n  name: \"Blog\",\n  filePathPattern: `./blog/**/**/*.mdx`,\n  fields: blogFields,\n  contentType: \"mdx\",\n  computedFields: computedFields,\n}));\n\nconst profileFields: FieldDefs = {\n  name: { type: \"string\", required: true },\n  description: { type: \"string\" },\n  tags: {\n    type: \"list\",\n    of: { type: \"string\" },\n  },\n  image: { type: \"string\", required: false },\n};\n\nexport const Profile = defineDocumentType(() => ({\n  name: \"Profile\",\n  filePathPattern: `./profile/**/*.mdx`,\n  fields: profileFields,\n  contentType: \"mdx\",\n  computedFields: computedFields,\n}));\n\nexport default makeSource({\n  contentDirPath: \"./content\",\n  documentTypes: [Blog, Profile],\n   mdx: {\n    remarkPlugins: [remarkGfm],\n    rehypePlugins: [rehypeSlug,[rehypePrismPlus, { ignoreMissing: true }]],\n  },\n});"],
  "mappings": ";AAAA,OAAO,mBAAmB;AAC1B;AAAA,EACE;AAAA,EACA;AAAA,OAGK;AAEP,OAAO,qBAAqB;AAC5B,OAAO,eAAe;AACtB,OAAO,gBAAgB;AAEvB,IAAM,iBAAiC;AAAA,EACrC,IAAI;AAAA,IACF,MAAM;AAAA,IACN,SAAS,CAAC,QAAQ,IAAI,MAAM,IAAI,KAAK,cAAc,QAAQ,SAAS,EAAE;AAAA,EACxE;AAAA,EACA,MAAM;AAAA,IACJ,MAAM;AAAA,IACN,SAAS,CAAC,QAAQ,GAAG,IAAI,KAAK,aAAa;AAAA,EAC7C;AAAA,EACA,cAAc;AAAA,IACZ,MAAM;AAAA,IACN,SAAS,CAAC,QAAQ,IAAI,KAAK,cAAc,MAAM,GAAG,EAAE,MAAM,CAAC,EAAE,KAAK,GAAG;AAAA,EACvE;AAAA,EACA,UAAU;AAAA,IACV,MAAM;AAAA,IACN,SAAS,OAAO,QAAQ;AACtB,YAAM,aAAa;AACnB,YAAM,UAAU,IAAI,cAAc;AAClC,YAAM,WAAW,MAAM,KAAK,IAAI,KAAK,IAAI,SAAS,UAAU,CAAC,EAAE;AAAA,QAC3D,CAAC,EAAE,OAAO,MAAU;AAClB,gBAAM,OAAO,QAAQ;AACrB,gBAAM,UAAU,QAAQ;AACxB,iBAAO;AAAA,YACL,OAAO,KAAK;AAAA,YACZ,MAAM;AAAA,YACN,MAAM,UAAU,QAAQ,KAAK,OAAO,IAAI;AAAA,UAC1C;AAAA,QACF;AAAA,MACF;AACA,aAAO;AAAA,IACX;AAAA,EACF;AACA;AAEA,IAAM,aAAwB;AAAA,EAC5B,IAAI;AAAA,IACA,MAAM;AAAA,EACR;AAAA,EACF,OAAO,EAAE,MAAM,UAAU,UAAU,KAAK;AAAA,EACxC,aAAa,EAAE,MAAM,SAAS;AAAA,EAC9B,MAAM,EAAE,MAAM,QAAQ,UAAU,KAAK;AAAA,EACrC,WAAW,EAAE,MAAM,WAAW,SAAS,KAAK;AAAA,EAC5C,UAAU,EAAC,MAAM,UAAU,SAAS,UAAS;AAC/C;AAEO,IAAM,OAAO,mBAAmB,OAAO;AAAA,EAC5C,MAAM;AAAA,EACN,iBAAiB;AAAA,EACjB,QAAQ;AAAA,EACR,aAAa;AAAA,EACb;AACF,EAAE;AAEF,IAAM,gBAA2B;AAAA,EAC/B,MAAM,EAAE,MAAM,UAAU,UAAU,KAAK;AAAA,EACvC,aAAa,EAAE,MAAM,SAAS;AAAA,EAC9B,MAAM;AAAA,IACJ,MAAM;AAAA,IACN,IAAI,EAAE,MAAM,SAAS;AAAA,EACvB;AAAA,EACA,OAAO,EAAE,MAAM,UAAU,UAAU,MAAM;AAC3C;AAEO,IAAM,UAAU,mBAAmB,OAAO;AAAA,EAC/C,MAAM;AAAA,EACN,iBAAiB;AAAA,EACjB,QAAQ;AAAA,EACR,aAAa;AAAA,EACb;AACF,EAAE;AAEF,IAAO,8BAAQ,WAAW;AAAA,EACxB,gBAAgB;AAAA,EAChB,eAAe,CAAC,MAAM,OAAO;AAAA,EAC5B,KAAK;AAAA,IACJ,eAAe,CAAC,SAAS;AAAA,IACzB,eAAe,CAAC,YAAW,CAAC,iBAAiB,EAAE,eAAe,KAAK,CAAC,CAAC;AAAA,EACvE;AACF,CAAC;",
  "names": []
}
